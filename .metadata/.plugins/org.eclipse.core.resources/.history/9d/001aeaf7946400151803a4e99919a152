

(batch "jessFact.clp")
;(batch "jessFact_2ieme-histoire.clp")




(defrule DeplacerCorpForce
; regle qui fait le lien entre la force d'un personnage et la capacite de deplacer un corp
   
    (deplacement de ?lieu1 a ?lieu2)
    (force de ?personne est eleve)
    =>   
    (printout t  " corp peut etre déplacé par " ?personne crlf)
    (assert (corp peut etre deplace par ?personne))
    
    )

(defrule DeplacementSansEtreVue
    ;regle qui vérifie la possibilite pour un personnage de se deplacer sans etre vue
    (or (deplacement de ?personne par passage secret)
    (deplacement de ?personne est discret))
    =>
    (printout t  "deplacement sans etre vue "  ?personne  crlf)
    (assert (deplacement sans etre vue par ?personne))
    )


(defrule DeplacementCorps
	;regle qui permet de faire le lien entre des traces de sang et un déplacement possible du corp
	;il y a se moins en moins de sang lors du deplacement
	
    (trouve ?litreMin litre de sang dans ?endroitTrouverSang1)
    
    (trouve ?litreMax litre de sang dans ?endroitTrouverSang2)
    (test(> ?litreMin ?litreMax ))
   
    =>
    (printout t  " deplacement possible de " ?endroitTrouverSang1 " a " ?endroitTrouverSang2 crlf)
   
    (assert (deplacement de ?endroitTrouverSang1 a ?endroitTrouverSang2))
   
    
)


(defrule CheminCorps
	;regle qui permet de faire le lien entre des traces de sang et le deplacement du corp
	
    (deplacement de ?endroitSangMax a ?endroitSsngMin)
    (deplacement de ?endroitTrouverSang1 a ?endroitTrouverSang2)
    
    ;(corp decouvert dans ?endroit )
 
    
    ;( while(exists (deplacement de ?sangMax a ?sangMin) then
     ;  (= ?sangMax ?sangMin); deplacement de ?premierEndroit a ?secondEndroit)
        
   ;; do	
    
    (test (eq ?endroitSangMax ?endroitTrouverSang1) )
   
    
     =>   
        (assert (meurtre a eu lieu dans ?endroitSangMax) )
    (printout t  " meurtre a eu lieu dans " ?endroitSangMax crlf)
    
       
    )
   


(defrule Temoignage
	; regle qui dit qu'un temoin qui voit quelqu'un sur les lieux est lui meme sur les lieux
    (le temoin ?temoin a vue ?personne dans ?lieu a ?heure heures)

    =>
    
    (printout t ?personne " a ete vue a " ?lieu " a " ?heure " heures" crlf)
    (printout t ?temoin " le temoin etait dans " ?lieu " a " ?heure " heures" crlf)
    
    (assert (presence de ?personne dans ?lieu a ?heure heures))
    (assert (presence de ?temoin dans ?lieu a ?heure heures))
)

(defrule SubAccesLieu
	; regle qui determine qu'un acces est possible dans les 2 sens
	(acces entre ?lieuAdjacent et ?lieu en ?minute minutes)
	;(not (exists (acces entre ?lieu et ?lieuAdjacent en ?minute minutes))
	=>
	(assert (acces entre ?lieu et ?lieuAdjacent en ?minute minutes))
        (printout t "acces entre " ?lieu " et " ?lieuAdjacent " em " ?minute " minutes" crlf)
)

(defrule Proximite
    ;regle qui determine la proximite possible d'une personne en rapport aux acces a ce lieu
   (presence de ?personne dans ?lieu a ?heure heures)
    (acces entre ?lieuAdjacent et ?lieu en ?minute minutes)
  	;(/ ?minute 60.0)
	;?a <- (+ ?minute 0.016)
 	
     =>
    ;(bind ?a 1)
    (bind ?a(* ?minute 0.016))
        
    (bind ?lapsDeTempMin (- ?heure ?a))
   	(bind ?lapsDeTempMax (+ ?heure ?a))
       
    (printout t "proximite de "?personne " dans " ?lieuAdjacent " avant " ?lapsDeTempMin " ou apres " ?lapsDeTempMax " heure " crlf)
    (assert (proximite de ?personne dans ?lieuAdjacent a ?lapsDeTempMin heures))
     (assert (proximite de ?personne dans ?lieuAdjacent a ?lapsDeTempMax heures))
)

(defrule ecartTemp
    ; ne fonctionne pas! a travailler
    (corp decouvert dans ?lieu a ?temp heures)
    
    (victime etait dans ?endroit a ?heure heures)
   ;(printout t "victime etait dans " ?endroit" a " ?heure " heure" crlf)
     (acces entre ?lieu2 et ?lieu1 en ?minute minutes)
    (meurtre a eu lieu dans ?lieuMeurtre)
     
    (test(eq ?lieu1 ?endroit))
    (test(eq ?lieu2 ?lieuMeurtre))
    
    =>
    (bind ?b(* ?minute 0.016))
        
    (bind ?heure (+ ?heure ?b))
   	
    (printout t "evenement produit entre " ?heure " et " ?temp " heure" crlf)
       (assert(evenement produit entre ?heure et ?temp heures ))
	
    )

(defrule suspectProximite

    ; etait possiblement sur les lieux selon un intervalle de temps

    ;au-lieu, du-temp,au-temp, a-Lheure
 
    (meurtre a eu lieu dans ?lieuMeurtre)

    ;(acces de ?lieuAcces par ?personne a-heure ?tempAcces)
 	;(proximite de ?personne dans ?lieuAdjacent entre ?lapsDeTempMin et ?lapsDeTempMax)
    ;(proximite de ?personne dans ?lieuAdjacent a ?heure en ?minute minutes)
     
   
    (proximite de ?personne dans ?lieu a ?Temp heures)
    
    
    (evenement produit entre ?tempDebut et ?tempFin heures)

    ;(acces entre ?lieu et ?lieuEvenement)

    (or (test(<= ?tempDebut ?Temp ))  (test(>= ?tempFin ?Temp)))
   ;(test)+-
    
    (test(eq ?lieuMeurtre ?lieu))
    =>

    (printout t "suspect de lieu " ?personne " a proximite " ?lieuMeurtre " entre " ?tempDebut " et " ?tempFin " heures "  crlf)

    (assert (suspect ?personne a proximite de ?lieuMeurtre de ?tempDebut a ?tempFin heures))
)

(defrule armeLieu
    (objet ?objet est dans ?lieuEvenement)
    (arme potentiel ?arme)
    (test(eq ?objet ?arme))
    =>
    (assert(arme ?arme et dans lieu ?lieuEvenement))
    )

(defrule suspectArme
    ;regle qui implique que si une personne etair sur les lieu ou l'arme se trouve 
    ; a pu avoir acces a l'arme
    (suspect ?personne a proximite de ?lieuEvenement de ?tempDebut a ?tempFin heures)
    
  
    ;(arme potentiel ?arme)
    (objet ?arme est dans lieu ?lieu)
    
    (test(eq ?lieuEvenement ?lieu ))
    =>
    (printout t  ?arme " a ete a proximite de "  ?personne   crlf)
    (assert (arme a ete a proximite de ?personne))
)

(defrule BlessureArme

    ; Blessure -> Arme

    (mort blessure ?type )

    (blessure ?type peut etre faite par arme ?arme)

    =>

	(printout t  ?arme " est une arme potentiel "  crlf)
	(assert (arme potentiel ?arme))
)

(defrule Alibi 
    ; permet d'enlever le nom d'un suspect si il était a un endroit  
    ; hors de la zone incriminé
    
    (suspect ?personne1 a proximite de ?lieuEvenement de ?tempDebut a ?tempFin heures)
    
  (personne ?personne2 a un alibi de ?heure1 heures a ?heure2 heures il etait a endroit ?Lieu)
   
    (test (eq ?personne1 ?personne2))
    (not(test (eq ?Lieu ?lieuEvenement )))
    (test (>= ?heure2 ?tempFin))
    (test (<= ?heure1 ?tempDebut))
    
     =>
    
    (printout t  " personne "  ?personne1 " a un alibi"   crlf)
    
    (assert (personne ?personne1 pas sur les lieux du crime ))
    )

(defrule SubRelationAmoureuse

    ; Si A est en relation avec B, donc B est en relation avec A

    (relation amoureuse entre ?premier et ?second)

    (not (exists (relation amoureuse entre ?second et ?premier)))

    =>

    (printout t "La relation amoureuse entre " ?premier " et " ?second " est vrai dans les deux sens" crlf)

    (assert (relation amoureuse entre ?second et ?premier))
)

; Motifs

(defrule suspectLieuDuCrimeTempDuCrime
    
  (suspect ?personne a proximite de ?lieuMeurtre de ?tempDebut a ?tempFin heures) 
   (personne ?personne1 pas sur les lieux du crime )
    
    (test (eq ?personne ?personne1))
    
    =>
    
    (assert (personne ?personne1 sur les lieux du crime))
    
    )

(defrule TriangleAmoureux

    (relation amoureuse entre ?premier et ?centre)

    (relation amoureuse entre ?second et ?centre)

    (not (test (eq ?premier ?second)))

    =>

    (printout t "Un triangle amoureux entre " ?premier ", " ?second " et " ?centre " donne un motif a " ?second " pour tuer " ?premier crlf)

    (assert (motif pour tuer ?premier par ?second))

)

(defrule ResponsableDrame

    (drame de ?acte pour ?cible)

    (travail de ?cible est ?travail)

    (responsable du ?acte de ?travail est ?travailResponsable)

    (travail de ?responsable est ?travailResponsable)

    =>

    (printout t ?cible " a vecu " ?acte " a cause de " ?responsable " ce qui lui donne un motif pour le tuer" crlf)

    (assert (motif pour tuer ?responsable par ?cible)) 
)

(defrule SuspectMotif
    (victime ?victime est morte)

	;a un motif
	(motif pour tuer ?victime par ?second)
    =>

    (printout t ?second " a un motif pour tuer " ?victime ", il est donc suspect" crlf)

    (assert (suspect avec motif ?second))


)

;Regle de fin !



(defrule Meutrier

    (declare (salience 41) )

    (arme-crime-possible ?arme)

    (suspect-a ?nom ?arme)

    (blessure ?blessure peut etre faite par arme ?arme)

    =>

    (printout t "Le crime a ete fait par " ?nom " avec le/la " ?arme ", une blessure " ?blessure "." crlf)

    (assert (Meurtrier ?nom))

    (halt)

)


(reset)

(run)

/*
(defrule lienTemps
    
    (l'evenement s'est produit de-temps ?tempDebut a-temps ?tempFin)
    (l'evenement s'est produit a ?lieu)
    (il y avait ?personne dans ?lieu a-temps ?tempMilieu)
    (test(<= ?tempMilieu ?tempFin))
    (test(>= ?tempMilieu ?tempDebut))
    =>
    
    (assert ())
    )*/

/*

essai d'un query
(defquery trouverArme
 ;trouver un type d'arme
  (declare (variables ?personne))
  (objet de nom ?personne arme ?arme)
    )


(defrule testQuery
    
    
    (corp peut etre deplace par ?personne)
    
    (bind ?result run-query* trouverArme ?personne)
	(while ?result next)
    =>
    (printout t ?result  crlf)
    )


*/
