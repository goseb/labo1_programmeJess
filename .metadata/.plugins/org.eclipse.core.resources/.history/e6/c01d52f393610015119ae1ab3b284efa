

(batch "jessFact.clp")
;(batch "jessFact_2ieme-histoire.clp")

(defrule deplacement
    
    (trouver du sang dans ?endroitTrouverPreuve)
    (corp découvert dans ?endroitCorp )
    =>
    (printout t  " le corp a été déplacé de " ?endroitTrouverPreuve " a " ?endroitCorp crlf)
    (assert (meurtre a eu lieu a ?endroitTrouverPreuve))
    )

(defrule lienVueLieu
    
    (le temoin ?temoin a vue ?personne dans le ?lieu a ?heure)
    =>
    
    (printout t ?personne " était dans " ?lieu " a " ?heure " heure" crlf)
    (printout t ?temoin " était dans " ?lieu " a " ?heure " heure" crlf)
    
    (assert (presence de ?personne dans le ?lieu a-temp ?heure))
    (assert (presence de ?temoin dans le ?lieu a-temp ?heure))
    )
/*
(defrule lienTemps
    
    (l'evenement s'est produit de-temps ?tempDebut a-temps ?tempFin)
    (l'evenement s'est produit a ?lieu)
    (il y avait ?personne dans ?lieu a-temps ?tempMilieu)
     (test(<= ?tempMilieu ?tempFin))
    (test(>= ?tempMilieu ?tempDebut))
    =>
    
    (assert ())
    )*/
(defrule proximite
    
    (presence de ?personne dans le ?lieu a-temp ?heure)
    (acces entre ?lieuAdjacent et ?lieu en ?temp heure)
    =>
    (?lapsDeTempMin <-(- ?heure ?temp))
    (?lapsDeTempMax <-(* ?heure ?temp))
    (assert (proximite de ?personne dans ?lieuAdjacent entre ?lapsDeTempMin et ?lapsDeTempMax ))
    )

 (defrule proximite2
    
    (presence de ?personne dans le ?lieu a-temp ?heure)
    (acces entre ?lieu et ?lieuAdjacent en ?temp heure)
    =>
    (?lapsDeTempMin <-(- ?heure ?temp))
    (?lapsDeTempMax <-(* ?heure ?temp))
    (assert (proximite de ?personne dans ?lieuAdjacent entre ?lapsDeTempMin et ?lapsDeTempMax )) 
    )

(defrule proximite3

    ; était possiblement sur les lieux selon un intervalle de temps

    ;au-lieu, du-temp,au-temp, a-Lheure

 
    (meurtre a eu lieu a ?lieuEvenement)
    ;(acces de ?lieuAcces par ?personne a-heure ?tempAcces)
 (proximite de ?personne dans ?lieuAdjacent entre ?lapsDeTempMin et ?lapsDeTempMax)
    
    (evenement produit de-temps ?tempDebut a-temps ?tempFin )

    ;(acces entre ?lieuAcces et ?lieuEvenement)

    (test(<= ?lapsDeTempMin ?tempFin ))
    (test(>= ?lapsDeTempMax ?tempDebut))
    =>

    (printout t "si " ?personne " était dans " ?lieuAdjacent " entre " ?tempDebut " et " ?tempFin " heure peut être a proximite de " ?lieuEvenement  crlf)

    (assert (personne-lieu ?personne et ?lieuEvenement))
)

(defrule arme-lieu-du-meurtre
    (arme ?arme est dans ?lieuEvenement)
    (personne-lieu ?personne et ?lieuEvenement)
    
    =>
     (printout t  ?personne " peut être sur lieux du crime avec arme " crlf)
    (assert (arme-lieu-du-meurtre ?personne))
    
    )
(defrule BlessureArme

    ; Blessure -> Arme

    (mort blessure ?type )

    (blessure ?type peut etre faite par arme ?arme)

    =>

(printout t  ?arme " est une arme potentiel "  crlf)

(assert (arme potentiel ?arme))

)
(defrule SubRelationAmoureuse

    ; Si A est en relation avec B, donc B est en relation avec A

    (relation amoureuse entre ?premier et ?second)

    (not (exists (relation amoureuse entre ?second et ?premier)))

    =>

    (printout t "La relation amoureuse entre " ?premier " et " ?second " est vrai dans les deux sens" crlf)

    (assert (relation amoureuse entre ?second et ?premier))

)
(defrule TriangleAmoureux

    (relation amoureuse entre ?premier et ?centre)

    (relation amoureuse entre ?second et ?centre)

    (not (test (eq ?premier ?second)))

    =>

    (printout t "Un triangle amoureux entre " ?premier ", " ?second " et " ?centre " donne un motif a " ?second " pour tuer " ?premier crlf)

    (assert (motif pour tuer ?premier par ?second))

)
(defrule Suspect

    (victime ?victime est morte)

;a un motif    

(motif pour tuer ?victime par ?second)

    =>

    (printout t ?second " a un motif pour tuer " ?victime ", il est donc suspect" crlf)

    (assert (suspect ?second))


)
(defrule ResponsableDrame

    (drame de ?acte pour ?cible)

    (travail de ?cible est ?travail)

    (responsable du ?acte de ?travail est ?travailResponsable)

    (travail de ?responsable est ?travailResponsable)

    =>

    (printout t ?cible " a vecu " ?acte " a cause de " ?responsable " ce qui lui donne un motif pour le tuer" crlf)

    (assert (motif pour tuer ?responsable par ?cible)) 

)

;Regle de fin !

(defrule meutrier

    (declare (salience 41) )

    (arme-crime-possible ?arme)

    (suspect-a ?nom ?arme)

    (blessure ?blessure peut etre faite par arme ?arme)

    =>

    (printout t "Le crime a été fait par " ?nom " avec le/la " ?arme ", une blessure " ?blessure "." crlf)

    (assert (Meurtrier ?nom))

    (halt)

)


(reset)

(run)

